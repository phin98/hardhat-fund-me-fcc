{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3455a063ade2806b0f20e8829bedc16cfe02ae6c2221de283c9bf6c1dfea4df",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1147089",
    "logsBloom": "0x
    "blockHash": "0xba97d6bdf83e20655c65a09f1903eec9075d79a3fb7b53f823e8b1c31f3769e8",
    "transactionHash": "0xd3455a063ade2806b0f20e8829bedc16cfe02ae6c2221de283c9bf6c1dfea4df",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1147089",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "644354dc88940e6ed75eed4f7dad0ece",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Phi Nguyen\",\"details\":\"This implements prices feeds as out library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements prices feeds as out library\"},\"withdraw()\":{\"details\":\"This implements prices feeds as out library\"}},\"title\":\"A contract for crowd funding \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds our contract \"},\"withdraw()\":{\"notice\":\"This function withdraws funds from our contract \"}},\"notice\":\"This contract is to demo a smaple funding contract \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crowd funding \\n *  @author Phi Nguyen\\n *  @notice This contract is to demo a smaple funding contract \\n *  @dev This implements prices feeds as out library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    /** \\n     *  @notice This function funds our contract \\n     *  @dev This implements prices feeds as out library\\n     */\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    /** \\n     *  @notice This function withdraws funds from our contract \\n     *  @dev This implements prices feeds as out library\\n     */\\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory\\n        for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\\n            address funder = funders[funderIndex];            \\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getFunders() public view returns (address[] memory) {\\n        return s_funders;\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\",\"keccak256\":\"0x342dd304044833372ebdcdff3b3fa80414921eaa5c8dd19cb2954bcf3e488713\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n  // We could make this public, but then we'd have to deploy it\\n  function getPrice(\\n    AggregatorV3Interface priceFeed\\n  ) internal view returns (uint256) {\\n    // Goerli ETH / USD Address\\n    // https://docs.chain.link/docs/ethereum-addresses/\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n    // or (Both will do the same thing)\\n    // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n  }\\n\\n  // 1000000000\\n  function getConversionRate(\\n    uint256 ethAmount,\\n    AggregatorV3Interface priceFeed\\n  ) internal view returns (uint256) {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // or (Both will do the same thing)\\n    // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n    // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x88c4bfddbe30b0ad055686d56d56aae5fba71f00e2d14765f8327fd059c1a7e9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620014633803806200146383398181016040528101906200003791906200012a565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b6112f7806200016c6000396000f3fe6080604052600436106100865760003560e01c80639e87a5cd116100595780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c14610174578063ea63a044146101b157610086565b80630343fb251461008b5780633ccfd60b146100c85780636b69a592146100df578063893d20e81461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b4f565b6101dc565b6040516100bf9190610b95565b60405180910390f35b3480156100d457600080fd5b506100dd610224565b005b3480156100eb57600080fd5b506100f4610466565b6040516101019190610b95565b60405180910390f35b34801561011657600080fd5b5061011f610473565b60405161012c9190610bbf565b60405180910390f35b34801561014157600080fd5b5061014a61049d565b6040516101579190610c39565b60405180910390f35b6101686104c7565b005b610172610601565b005b34801561018057600080fd5b5061019b60048036038101906101969190610c80565b610893565b6040516101a89190610bbf565b60405180910390f35b3480156101bd57600080fd5b506101c66108db565b6040516101d39190610d6b565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ab576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610356576000600182815481106102d1576102d0610d8d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061034e90610deb565b9150506102ae565b50600067ffffffffffffffff81111561037257610371610e34565b5b6040519080825280602002602001820160405280156103a05781602001602082028036833780820191505090505b50600190805190602001906103b6929190610a45565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103dd90610e94565b60006040518083038185875af1925050503d806000811461041a576040519150601f19603f3d011682016040523d82523d6000602084013e61041f565b606091505b5050905080610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a90610f06565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610506600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461096990919063ffffffff16565b1015610547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053e90610f72565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105959190610f92565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610688576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561070c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106c2575b5050505050905060005b815181101561079657600082828151811061073457610733610d8d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061078e90610deb565b915050610716565b50600067ffffffffffffffff8111156107b2576107b1610e34565b5b6040519080825280602002602001820160405280156107e05781602001602082028036833780820191505090505b50600190805190602001906107f6929190610a45565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161083f90610e94565b60006040518083038185875af1925050503d806000811461087c576040519150601f19603f3d011682016040523d82523d6000602084013e610881565b606091505b505090508061088f57600080fd5b5050565b6000600182815481106108a9576108a8610d8d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6060600180548060200260200160405190810160405280929190818152602001828054801561095f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610915575b5050505050905090565b600080610975836109a5565b90506000670de0b6b3a7640000858361098e9190610fe8565b6109989190611071565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109ee57600080fd5b505afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a26919061112f565b5050509150506402540be40081610a3d91906111aa565b915050919050565b828054828255906000526020600020908101928215610abe579160200282015b82811115610abd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a65565b5b509050610acb9190610acf565b5090565b5b80821115610ae8576000816000905550600101610ad0565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b1c82610af1565b9050919050565b610b2c81610b11565b8114610b3757600080fd5b50565b600081359050610b4981610b23565b92915050565b600060208284031215610b6557610b64610aec565b5b6000610b7384828501610b3a565b91505092915050565b6000819050919050565b610b8f81610b7c565b82525050565b6000602082019050610baa6000830184610b86565b92915050565b610bb981610b11565b82525050565b6000602082019050610bd46000830184610bb0565b92915050565b6000819050919050565b6000610bff610bfa610bf584610af1565b610bda565b610af1565b9050919050565b6000610c1182610be4565b9050919050565b6000610c2382610c06565b9050919050565b610c3381610c18565b82525050565b6000602082019050610c4e6000830184610c2a565b92915050565b610c5d81610b7c565b8114610c6857600080fd5b50565b600081359050610c7a81610c54565b92915050565b600060208284031215610c9657610c95610aec565b5b6000610ca484828501610c6b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610ce281610b11565b82525050565b6000610cf48383610cd9565b60208301905092915050565b6000602082019050919050565b6000610d1882610cad565b610d228185610cb8565b9350610d2d83610cc9565b8060005b83811015610d5e578151610d458882610ce8565b9750610d5083610d00565b925050600181019050610d31565b5085935050505092915050565b60006020820190508181036000830152610d858184610d0d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610df682610b7c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e2957610e28610dbc565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e7e600083610e63565b9150610e8982610e6e565b600082019050919050565b6000610e9f82610e71565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ef0600b83610ea9565b9150610efb82610eba565b602082019050919050565b60006020820190508181036000830152610f1f81610ee3565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610f5c601b83610ea9565b9150610f6782610f26565b602082019050919050565b60006020820190508181036000830152610f8b81610f4f565b9050919050565b6000610f9d82610b7c565b9150610fa883610b7c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fdd57610fdc610dbc565b5b828201905092915050565b6000610ff382610b7c565b9150610ffe83610b7c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561103757611036610dbc565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061107c82610b7c565b915061108783610b7c565b92508261109757611096611042565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110c1816110a2565b81146110cc57600080fd5b50565b6000815190506110de816110b8565b92915050565b6000819050919050565b6110f7816110e4565b811461110257600080fd5b50565b600081519050611114816110ee565b92915050565b60008151905061112981610c54565b92915050565b600080600080600060a0868803121561114b5761114a610aec565b5b6000611159888289016110cf565b955050602061116a88828901611105565b945050604061117b8882890161111a565b935050606061118c8882890161111a565b925050608061119d888289016110cf565b9150509295509295909350565b60006111b5826110e4565b91506111c0836110e4565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111ff576111fe610dbc565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561123c5761123b610dbc565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561127957611278610dbc565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112b6576112b5610dbc565b5b82820290509291505056fea2646970667358221220e3fb2902dd9e08a5da888cba5eb1b9e8359b3f706bd5e207d03ae4c430835f9e64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80639e87a5cd116100595780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c14610174578063ea63a044146101b157610086565b80630343fb251461008b5780633ccfd60b146100c85780636b69a592146100df578063893d20e81461010a575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b4f565b6101dc565b6040516100bf9190610b95565b60405180910390f35b3480156100d457600080fd5b506100dd610224565b005b3480156100eb57600080fd5b506100f4610466565b6040516101019190610b95565b60405180910390f35b34801561011657600080fd5b5061011f610473565b60405161012c9190610bbf565b60405180910390f35b34801561014157600080fd5b5061014a61049d565b6040516101579190610c39565b60405180910390f35b6101686104c7565b005b610172610601565b005b34801561018057600080fd5b5061019b60048036038101906101969190610c80565b610893565b6040516101a89190610bbf565b60405180910390f35b3480156101bd57600080fd5b506101c66108db565b6040516101d39190610d6b565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ab576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610356576000600182815481106102d1576102d0610d8d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061034e90610deb565b9150506102ae565b50600067ffffffffffffffff81111561037257610371610e34565b5b6040519080825280602002602001820160405280156103a05781602001602082028036833780820191505090505b50600190805190602001906103b6929190610a45565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103dd90610e94565b60006040518083038185875af1925050503d806000811461041a576040519150601f19603f3d011682016040523d82523d6000602084013e61041f565b606091505b5050905080610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a90610f06565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610506600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461096990919063ffffffff16565b1015610547576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053e90610f72565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105959190610f92565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610688576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561070c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106c2575b5050505050905060005b815181101561079657600082828151811061073457610733610d8d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061078e90610deb565b915050610716565b50600067ffffffffffffffff8111156107b2576107b1610e34565b5b6040519080825280602002602001820160405280156107e05781602001602082028036833780820191505090505b50600190805190602001906107f6929190610a45565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff164760405161083f90610e94565b60006040518083038185875af1925050503d806000811461087c576040519150601f19603f3d011682016040523d82523d6000602084013e610881565b606091505b505090508061088f57600080fd5b5050565b6000600182815481106108a9576108a8610d8d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6060600180548060200260200160405190810160405280929190818152602001828054801561095f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610915575b5050505050905090565b600080610975836109a5565b90506000670de0b6b3a7640000858361098e9190610fe8565b6109989190611071565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109ee57600080fd5b505afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a26919061112f565b5050509150506402540be40081610a3d91906111aa565b915050919050565b828054828255906000526020600020908101928215610abe579160200282015b82811115610abd5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a65565b5b509050610acb9190610acf565b5090565b5b80821115610ae8576000816000905550600101610ad0565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b1c82610af1565b9050919050565b610b2c81610b11565b8114610b3757600080fd5b50565b600081359050610b4981610b23565b92915050565b600060208284031215610b6557610b64610aec565b5b6000610b7384828501610b3a565b91505092915050565b6000819050919050565b610b8f81610b7c565b82525050565b6000602082019050610baa6000830184610b86565b92915050565b610bb981610b11565b82525050565b6000602082019050610bd46000830184610bb0565b92915050565b6000819050919050565b6000610bff610bfa610bf584610af1565b610bda565b610af1565b9050919050565b6000610c1182610be4565b9050919050565b6000610c2382610c06565b9050919050565b610c3381610c18565b82525050565b6000602082019050610c4e6000830184610c2a565b92915050565b610c5d81610b7c565b8114610c6857600080fd5b50565b600081359050610c7a81610c54565b92915050565b600060208284031215610c9657610c95610aec565b5b6000610ca484828501610c6b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610ce281610b11565b82525050565b6000610cf48383610cd9565b60208301905092915050565b6000602082019050919050565b6000610d1882610cad565b610d228185610cb8565b9350610d2d83610cc9565b8060005b83811015610d5e578151610d458882610ce8565b9750610d5083610d00565b925050600181019050610d31565b5085935050505092915050565b60006020820190508181036000830152610d858184610d0d565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610df682610b7c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e2957610e28610dbc565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e7e600083610e63565b9150610e8982610e6e565b600082019050919050565b6000610e9f82610e71565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ef0600b83610ea9565b9150610efb82610eba565b602082019050919050565b60006020820190508181036000830152610f1f81610ee3565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610f5c601b83610ea9565b9150610f6782610f26565b602082019050919050565b60006020820190508181036000830152610f8b81610f4f565b9050919050565b6000610f9d82610b7c565b9150610fa883610b7c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fdd57610fdc610dbc565b5b828201905092915050565b6000610ff382610b7c565b9150610ffe83610b7c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561103757611036610dbc565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061107c82610b7c565b915061108783610b7c565b92508261109757611096611042565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110c1816110a2565b81146110cc57600080fd5b50565b6000815190506110de816110b8565b92915050565b6000819050919050565b6110f7816110e4565b811461110257600080fd5b50565b600081519050611114816110ee565b92915050565b60008151905061112981610c54565b92915050565b600080600080600060a0868803121561114b5761114a610aec565b5b6000611159888289016110cf565b955050602061116a88828901611105565b945050604061117b8882890161111a565b935050606061118c8882890161111a565b925050608061119d888289016110cf565b9150509295509295909350565b60006111b5826110e4565b91506111c0836110e4565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111ff576111fe610dbc565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561123c5761123b610dbc565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561127957611278610dbc565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112b6576112b5610dbc565b5b82820290509291505056fea2646970667358221220e3fb2902dd9e08a5da888cba5eb1b9e8359b3f706bd5e207d03ae4c430835f9e64736f6c63430008080033",
  "devdoc": {
    "author": "Phi Nguyen",
    "details": "This implements prices feeds as out library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements prices feeds as out library"
      },
      "withdraw()": {
        "details": "This implements prices feeds as out library"
      }
    },
    "title": "A contract for crowd funding ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds our contract "
      },
      "withdraw()": {
        "notice": "This function withdraws funds from our contract "
      }
    },
    "notice": "This contract is to demo a smaple funding contract ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}